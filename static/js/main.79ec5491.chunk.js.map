{"version":3,"sources":["models/Bookmark.ts","bookmarks.ts","components/BookmarksGrid.tsx","components/BookmarksList.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Bookmark","title","url","category","BOOKMARKS","BookmarksGrid","bookmarks","id","tags","forEach","categorizedBookmarks","_","aTags","map","bookmark","idx","key","href","target","rel","push","renderBookmarks","BookmarksList","sections","section","App","useState","Map","setBookmarks","displayAsGrid","setDisplayAsGrid","useEffect","sort","b1","b2","toLowerCase","filtered","get","set","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oSAAqBA,EACjB,WAAmBC,EAAsBC,EAAoBC,GAAmB,yBAA7DF,QAA4D,KAAtCC,MAAsC,KAAlBC,YCoClDC,EAnCG,CACd,IAAIJ,EAAS,YAAa,uBAAwB,cAClD,IAAIA,EAAS,WAAY,uBAAwB,cACjD,IAAIA,EAAS,eAAgB,0BAA2B,cACxD,IAAIA,EAAS,MAAO,kBAAmB,QACvC,IAAIA,EAAS,sBAAuB,kBAAmB,QACvD,IAAIA,EAAS,UAAW,sBAAuB,QAC/C,IAAIA,EAAS,YAAa,uBAAwB,eAClD,IAAIA,EAAS,oBAAqB,+BAAgC,UAClE,IAAIA,EAAS,oBAAqB,2BAA4B,SAC9D,IAAIA,EAAS,kBAAmB,8BAA+B,SAC/D,IAAIA,EAAS,SAAU,qBAAsB,WAC7C,IAAIA,EAAS,sBAAuB,sCAAuC,WAC3E,IAAIA,EAAS,cAAe,gCAAiC,eAC7D,IAAIA,EAAS,eAAgB,sCAAuC,eACpE,IAAIA,EAAS,eAAgB,4BAA6B,eAC1D,IAAIA,EAAS,gBAAiB,gCAAiC,WAC/D,IAAIA,EAAS,gBAAiB,gCAAiC,SAC/D,IAAIA,EAAS,kBAAmB,4BAA6B,QAC7D,IAAIA,EAAS,sBAAuB,qCAAsC,SAC1E,IAAIA,EAAS,cAAe,+BAAgC,QAC5D,IAAIA,EAAS,cAAe,8BAA+B,SAC3D,IAAIA,EAAS,cAAe,2BAA4B,WACxD,IAAIA,EAAS,WAAY,4BAA6B,cACtD,IAAIA,EAAS,iBAAkB,8BAA+B,eAC9D,IAAIA,EAAS,eAAgB,+BAAgC,QAC7D,IAAIA,EAAS,cAAe,kCAAmC,WAC/D,IAAIA,EAAS,OAAQ,mBAAoB,WACzC,IAAIA,EAAS,cAAe,yBAA0B,eACtD,IAAIA,EAAS,aAAc,yBAA0B,eACrD,IAAIA,EAAS,iBAAkB,iCAAkC,QACjE,IAAIA,EAAS,SAAU,sBAAuB,QAC9C,IAAIA,EAAS,SAAU,0BAA2B,W,OCDvCK,G,MAzBO,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,UAkBpB,OACI,0BAAMC,GAAG,aAlBS,WACtB,IAAMC,EAAsB,GAa5B,OAXAF,EAAUG,SAAQ,SAACC,EAAsBC,GACvC,IAAMC,EAAQF,EAAqBG,KAAI,SAACC,EAAUC,GAChD,OACI,uBAAGC,IAAKD,EAAKE,KAAMH,EAASZ,IAAKgB,OAAO,SAASC,IAAI,uBACjD,6BAAML,EAASb,WAIzBO,EAAKY,KAAL,MAAAZ,EAAI,YAASI,OAGRJ,EAKEa,MCKEC,G,YAzBO,SAAC,GAAsC,IAArChB,EAAoC,EAApCA,UAkBpB,OACI,0BAAMC,GAAG,aAlBS,WACtB,IAAMgB,EAA0B,GAahC,OAXAjB,EAAUG,SAAQ,SAACC,EAAsBP,GACvC,IAAMqB,EAAU,6BAASR,IAAKb,GAC5B,4BAAKA,GACL,4BACGO,EAAqBG,KAAI,SAACC,EAAUC,GAAX,OAAmB,wBAAIC,IAAKD,GAAK,uBAAGE,KAAMH,EAASZ,IAAKgB,OAAO,SAASC,IAAI,uBAAuBL,EAASb,aAI1IsB,EAASH,KAAKI,MAGTD,EAKEF,MCaEI,EAlCH,WAAO,IAAD,EACkBC,mBAAkC,IAAIC,KADxD,mBACTrB,EADS,KACEsB,EADF,OAE0BF,oBAAS,GAFnC,mBAETG,EAFS,KAEMC,EAFN,KAmBhB,OAfAC,qBAAU,WACR,IAAMrB,EAAuB,IAAIiB,IACjCvB,EAAU4B,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAG9B,SAAW+B,EAAG/B,UAAY,EAAI,KAF9C,oBAISC,GAJT,IAId,2BAAkC,CAAC,IAAxBU,EAAuB,QAC1BX,EAAWW,EAASX,SAASgC,cAC7BC,EAAW1B,EAAqB2B,IAAIlC,IAAa,GACvDiC,EAAShB,KAAKN,GACdJ,EAAqB4B,IAAInC,EAAUiC,IARvB,8BAWd1B,EAAqBD,SAAQ,SAACH,EAAuBK,GAAxB,OAA8BL,EAAU0B,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGhC,MAAQiC,EAAGjC,OAAS,EAAI,QACjH2B,EAAalB,KACZ,IAGD,6BACE,gCACE,yCAGDmB,EAAgB,kBAAC,EAAD,CAAevB,UAAWA,IAAgB,kBAAC,EAAD,CAAeA,UAAWA,IAErF,gCACE,2BAAOiC,QAAS,kBAAMT,GAAkBD,KAAiBA,EAAgB,YAAc,gBCvB3EW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.79ec5491.chunk.js","sourcesContent":["export default class Bookmark {\n    constructor(public title: string, public url: string, public category: string) {}\n}","import Bookmark from \"./models/Bookmark\";\n\nconst BOOKMARKS = [\n    new Bookmark(\"The Verge\", \"https://theverge.com\", \"technology\"),\n    new Bookmark(\"Engadget\", \"https://engadget.com\", \"technology\"),\n    new Bookmark(\"Ars Technica\", \"https://arstechnica.com\", \"technology\"),\n    new Bookmark(\"NPR\", \"https://npr.org\", \"news\"),\n    new Bookmark(\"Wall Street Journal\", \"https://wsj.com\", \"news\"),\n    new Bookmark(\"Reuters\", \"https://reuters.com\", \"news\"),\n    new Bookmark(\"DP Review\", \"https://dpreview.com\", \"photography\"),\n    new Bookmark(\"Smashing Magazine\", \"https://smashingmagazine.com\", \"design\"),\n    new Bookmark(\"The Morning Paper\", \"https://blog.acolyer.org\", \"blogs\"),\n    new Bookmark(\"Signal v. Noise\", \"https://m.signalvnoise.com/\", \"blogs\"),\n    new Bookmark(\"Nature\", \"http://nature.com/\", \"science\"),\n    new Bookmark(\"Scientific American\", \"https://www.scientificamerican.com/\", \"science\"),\n    new Bookmark(\"Hacker News\", \"https://news.ycombinator.com/\", \"engineering\"),\n    new Bookmark(\"Netflix Tech\", \"https://medium.com/@NetflixTechBlog\", \"engineering\"),\n    new Bookmark(\"Mozilla Blog\", \"https://blog.mozilla.org/\", \"engineering\"),\n    new Bookmark(\"Atlas Obscura\", \"https://www.atlasobscura.com/\", \"culture\"),\n    new Bookmark(\"Prof Galloway\", \"https://www.profgalloway.com/\", \"blogs\"),\n    new Bookmark(\"Philly Inquirer\", \"https://www.inquirer.com/\", \"news\"),\n    new Bookmark(\"Deep South Ventures\", \"https://www.deepsouthventures.com/\", \"blogs\"),\n    new Bookmark(\"NYT Cooking\", \"https://cooking.nytimes.com/\", \"food\"),\n    new Bookmark(\"Gates Notes\", \"https://www.gatesnotes.com/\", \"blogs\"),\n    new Bookmark(\"JSTOR Daily\", \"https://daily.jstor.org/\", \"culture\"),\n    new Bookmark(\"Protocol\", \"https://www.protocol.com/\", \"technology\"),\n    new Bookmark(\"FB Engineering\", \"https://engineering.fb.com/\", \"engineering\"),\n    new Bookmark(\"The Atlantic\", \"https://www.theatlantic.com/\", \"news\"),\n    new Bookmark(\"Smithsonian\", \"https://www.smithsonianmag.com/\", \"culture\"),\n    new Bookmark(\"Aeon\", \"https://aeon.co/\", \"culture\"),\n    new Bookmark(\"Paul Graham\", \"http://paulgraham.com/\", \"engineering\"),\n    new Bookmark(\"Peta Pixel\", \"https://petapixel.com/\", \"photography\"),\n    new Bookmark(\"Splendid Table\", \"https://www.splendidtable.org/\", \"food\"),\n    new Bookmark(\"Food52\", \"https://food52.com/\", \"food\"),\n    new Bookmark(\"Dezeen\", \"https://www.dezeen.com/\", \"design\"),\n];\n\nexport default BOOKMARKS;","import React from 'react';\nimport Bookmark from '../models/Bookmark';\nimport './BookmarksGrid.css';\n\ninterface BookmarksGridProps {\n    bookmarks: Map<string, Bookmark[]>;\n}\n\nconst BookmarksGrid = ({bookmarks} : BookmarksGridProps) => {\n  const renderBookmarks = () => {\n    const tags: JSX.Element[] = [];\n\n    bookmarks.forEach((categorizedBookmarks, _) => {\n      const aTags = categorizedBookmarks.map((bookmark, idx) => {\n        return (\n            <a key={idx} href={bookmark.url} target=\"_blank\" rel=\"noreferrer noopener\">\n                <div>{bookmark.title}</div>\n            </a>\n        );\n      });\n      tags.push(...aTags);\n    });\n\n    return tags;\n  };\n\n    return (\n        <main id=\"grid-view\">\n            {renderBookmarks()}\n        </main>\n    );\n}\n\nexport default BookmarksGrid;","import React from 'react';\nimport Bookmark from '../models/Bookmark';\nimport './BookmarksList.css';\n\ninterface BookmarksListProps {\n    bookmarks: Map<string, Bookmark[]>;\n}\n\nconst BookmarksList = ({bookmarks} : BookmarksListProps) => {\n  const renderBookmarks = () => {\n    const sections: JSX.Element[] = [];\n\n    bookmarks.forEach((categorizedBookmarks, category) => {\n      const section = <section key={category}>\n        <h3>{category}</h3>\n        <ul>\n          {categorizedBookmarks.map((bookmark, idx) => <li key={idx}><a href={bookmark.url} target=\"_blank\" rel=\"noreferrer noopener\">{bookmark.title}</a></li>)}\n        </ul>\n      </section>;\n\n      sections.push(section);\n    });\n\n    return sections;\n  };\n\n    return (\n        <main id=\"list-view\">\n            {renderBookmarks()}\n        </main>\n    );\n}\n\nexport default BookmarksList;","import React, {useEffect, useState} from 'react';\nimport BOOKMARKS from '../bookmarks';\nimport Bookmark from '../models/Bookmark';\nimport BookmarksGrid from './BookmarksGrid';\nimport './App.css';\nimport BookmarksList from './BookmarksList';\n\nconst App = () => {\n  const [bookmarks, setBookmarks] = useState<Map<string, Bookmark[]>>(new Map());\n  const [displayAsGrid, setDisplayAsGrid] = useState(false);\n\n  useEffect(() => {\n    const categorizedBookmarks = new Map();\n    BOOKMARKS.sort((b1, b2) => b1.category < b2.category ? -1 : 1);\n\n    for (const bookmark of BOOKMARKS) {\n      const category = bookmark.category.toLowerCase();\n      const filtered = categorizedBookmarks.get(category) || [];\n      filtered.push(bookmark);\n      categorizedBookmarks.set(category, filtered);\n    }\n\n    categorizedBookmarks.forEach((bookmarks: Bookmark[], _) => bookmarks.sort((b1, b2) => b1.title < b2.title ? -1 : 1));\n    setBookmarks(categorizedBookmarks);\n  }, []);\n\n  return (\n    <div>\n      <header>\n        <h1>curated.</h1>\n      </header>\n\n      {displayAsGrid ? <BookmarksGrid bookmarks={bookmarks} /> : <BookmarksList bookmarks={bookmarks} />}\n\n      <footer>\n        <small onClick={() => setDisplayAsGrid(!displayAsGrid)}>{displayAsGrid ? 'List View' : 'Grid View'}</small>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}